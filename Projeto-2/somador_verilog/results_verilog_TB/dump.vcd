$date
      Tue May  3 15:15:13 2022

$end
$version
      Veriwell 2.8.7
$end
$timescale
      1s
$end


$scope module adder_32_TB $end
$var reg      32 !    x [31:0] $end
$var reg      32 "    y [31:0] $end
$var reg       1 #    cin  $end
$var wire     32 $    sum [31:0] $end
$var wire      1 %    cout  $end

$scope module uut $end
$var wire      1 &    cout  $end
$var wire     32 '    sum [31:0] $end
$var wire      1 (    cin  $end
$var wire     32 )    y [31:0] $end
$var wire     32 *    x [31:0] $end
$var wire      1 +    cout_cin  $end

$scope module adder2 $end
$var wire      1 ,    cout  $end
$var wire     16 -    sum [15:0] $end
$var wire      1 .    cin  $end
$var wire     16 /    y [15:0] $end
$var wire     16 0    x [15:0] $end
$var wire      3 1    cout_cin [2:0] $end

$scope module adder4 $end
$var wire      1 2    cout  $end
$var wire      4 3    sum [3:0] $end
$var wire      1 4    cin  $end
$var wire      4 5    y [3:0] $end
$var wire      4 6    x [3:0] $end
$var wire      3 7    cout_cin [2:0] $end

$scope module adder4 $end
$var wire      1 8    cout  $end
$var wire      1 9    sum  $end
$var wire      1 :    cin  $end
$var wire      1 ;    y  $end
$var wire      1 <    x  $end
$upscope $end


$scope module adder3 $end
$var wire      1 =    cout  $end
$var wire      1 >    sum  $end
$var wire      1 ?    cin  $end
$var wire      1 @    y  $end
$var wire      1 A    x  $end
$upscope $end


$scope module adder2 $end
$var wire      1 B    cout  $end
$var wire      1 C    sum  $end
$var wire      1 D    cin  $end
$var wire      1 E    y  $end
$var wire      1 F    x  $end
$upscope $end


$scope module adder1 $end
$var wire      1 G    cout  $end
$var wire      1 H    sum  $end
$var wire      1 I    cin  $end
$var wire      1 J    y  $end
$var wire      1 K    x  $end
$upscope $end

$upscope $end


$scope module adder3 $end
$var wire      1 L    cout  $end
$var wire      4 M    sum [3:0] $end
$var wire      1 N    cin  $end
$var wire      4 O    y [3:0] $end
$var wire      4 P    x [3:0] $end
$var wire      3 Q    cout_cin [2:0] $end

$scope module adder4 $end
$var wire      1 R    cout  $end
$var wire      1 S    sum  $end
$var wire      1 T    cin  $end
$var wire      1 U    y  $end
$var wire      1 V    x  $end
$upscope $end


$scope module adder3 $end
$var wire      1 W    cout  $end
$var wire      1 X    sum  $end
$var wire      1 Y    cin  $end
$var wire      1 Z    y  $end
$var wire      1 [    x  $end
$upscope $end


$scope module adder2 $end
$var wire      1 \    cout  $end
$var wire      1 ]    sum  $end
$var wire      1 ^    cin  $end
$var wire      1 _    y  $end
$var wire      1 `    x  $end
$upscope $end


$scope module adder1 $end
$var wire      1 a    cout  $end
$var wire      1 b    sum  $end
$var wire      1 c    cin  $end
$var wire      1 d    y  $end
$var wire      1 e    x  $end
$upscope $end

$upscope $end


$scope module adder2 $end
$var wire      1 f    cout  $end
$var wire      4 g    sum [3:0] $end
$var wire      1 h    cin  $end
$var wire      4 i    y [3:0] $end
$var wire      4 j    x [3:0] $end
$var wire      3 k    cout_cin [2:0] $end

$scope module adder4 $end
$var wire      1 l    cout  $end
$var wire      1 m    sum  $end
$var wire      1 n    cin  $end
$var wire      1 o    y  $end
$var wire      1 p    x  $end
$upscope $end


$scope module adder3 $end
$var wire      1 q    cout  $end
$var wire      1 r    sum  $end
$var wire      1 s    cin  $end
$var wire      1 t    y  $end
$var wire      1 u    x  $end
$upscope $end


$scope module adder2 $end
$var wire      1 v    cout  $end
$var wire      1 w    sum  $end
$var wire      1 x    cin  $end
$var wire      1 y    y  $end
$var wire      1 z    x  $end
$upscope $end


$scope module adder1 $end
$var wire      1 {    cout  $end
$var wire      1 |    sum  $end
$var wire      1 }    cin  $end
$var wire      1 ~    y  $end
$var wire      1 !"   x  $end
$upscope $end

$upscope $end


$scope module adder1 $end
$var wire      1 ""   cout  $end
$var wire      4 #"   sum [3:0] $end
$var wire      1 $"   cin  $end
$var wire      4 %"   y [3:0] $end
$var wire      4 &"   x [3:0] $end
$var wire      3 '"   cout_cin [2:0] $end

$scope module adder4 $end
$var wire      1 ("   cout  $end
$var wire      1 )"   sum  $end
$var wire      1 *"   cin  $end
$var wire      1 +"   y  $end
$var wire      1 ,"   x  $end
$upscope $end


$scope module adder3 $end
$var wire      1 -"   cout  $end
$var wire      1 ."   sum  $end
$var wire      1 /"   cin  $end
$var wire      1 0"   y  $end
$var wire      1 1"   x  $end
$upscope $end


$scope module adder2 $end
$var wire      1 2"   cout  $end
$var wire      1 3"   sum  $end
$var wire      1 4"   cin  $end
$var wire      1 5"   y  $end
$var wire      1 6"   x  $end
$upscope $end


$scope module adder1 $end
$var wire      1 7"   cout  $end
$var wire      1 8"   sum  $end
$var wire      1 9"   cin  $end
$var wire      1 :"   y  $end
$var wire      1 ;"   x  $end
$upscope $end

$upscope $end

$upscope $end


$scope module adder1 $end
$var wire      1 <"   cout  $end
$var wire     16 ="   sum [15:0] $end
$var wire      1 >"   cin  $end
$var wire     16 ?"   y [15:0] $end
$var wire     16 @"   x [15:0] $end
$var wire      3 A"   cout_cin [2:0] $end

$scope module adder4 $end
$var wire      1 B"   cout  $end
$var wire      4 C"   sum [3:0] $end
$var wire      1 D"   cin  $end
$var wire      4 E"   y [3:0] $end
$var wire      4 F"   x [3:0] $end
$var wire      3 G"   cout_cin [2:0] $end

$scope module adder4 $end
$var wire      1 H"   cout  $end
$var wire      1 I"   sum  $end
$var wire      1 J"   cin  $end
$var wire      1 K"   y  $end
$var wire      1 L"   x  $end
$upscope $end


$scope module adder3 $end
$var wire      1 M"   cout  $end
$var wire      1 N"   sum  $end
$var wire      1 O"   cin  $end
$var wire      1 P"   y  $end
$var wire      1 Q"   x  $end
$upscope $end


$scope module adder2 $end
$var wire      1 R"   cout  $end
$var wire      1 S"   sum  $end
$var wire      1 T"   cin  $end
$var wire      1 U"   y  $end
$var wire      1 V"   x  $end
$upscope $end


$scope module adder1 $end
$var wire      1 W"   cout  $end
$var wire      1 X"   sum  $end
$var wire      1 Y"   cin  $end
$var wire      1 Z"   y  $end
$var wire      1 ["   x  $end
$upscope $end

$upscope $end


$scope module adder3 $end
$var wire      1 \"   cout  $end
$var wire      4 ]"   sum [3:0] $end
$var wire      1 ^"   cin  $end
$var wire      4 _"   y [3:0] $end
$var wire      4 `"   x [3:0] $end
$var wire      3 a"   cout_cin [2:0] $end

$scope module adder4 $end
$var wire      1 b"   cout  $end
$var wire      1 c"   sum  $end
$var wire      1 d"   cin  $end
$var wire      1 e"   y  $end
$var wire      1 f"   x  $end
$upscope $end


$scope module adder3 $end
$var wire      1 g"   cout  $end
$var wire      1 h"   sum  $end
$var wire      1 i"   cin  $end
$var wire      1 j"   y  $end
$var wire      1 k"   x  $end
$upscope $end


$scope module adder2 $end
$var wire      1 l"   cout  $end
$var wire      1 m"   sum  $end
$var wire      1 n"   cin  $end
$var wire      1 o"   y  $end
$var wire      1 p"   x  $end
$upscope $end


$scope module adder1 $end
$var wire      1 q"   cout  $end
$var wire      1 r"   sum  $end
$var wire      1 s"   cin  $end
$var wire      1 t"   y  $end
$var wire      1 u"   x  $end
$upscope $end

$upscope $end


$scope module adder2 $end
$var wire      1 v"   cout  $end
$var wire      4 w"   sum [3:0] $end
$var wire      1 x"   cin  $end
$var wire      4 y"   y [3:0] $end
$var wire      4 z"   x [3:0] $end
$var wire      3 {"   cout_cin [2:0] $end

$scope module adder4 $end
$var wire      1 |"   cout  $end
$var wire      1 }"   sum  $end
$var wire      1 ~"   cin  $end
$var wire      1 !#   y  $end
$var wire      1 "#   x  $end
$upscope $end


$scope module adder3 $end
$var wire      1 ##   cout  $end
$var wire      1 $#   sum  $end
$var wire      1 %#   cin  $end
$var wire      1 &#   y  $end
$var wire      1 '#   x  $end
$upscope $end


$scope module adder2 $end
$var wire      1 (#   cout  $end
$var wire      1 )#   sum  $end
$var wire      1 *#   cin  $end
$var wire      1 +#   y  $end
$var wire      1 ,#   x  $end
$upscope $end


$scope module adder1 $end
$var wire      1 -#   cout  $end
$var wire      1 .#   sum  $end
$var wire      1 /#   cin  $end
$var wire      1 0#   y  $end
$var wire      1 1#   x  $end
$upscope $end

$upscope $end


$scope module adder1 $end
$var wire      1 2#   cout  $end
$var wire      4 3#   sum [3:0] $end
$var wire      1 4#   cin  $end
$var wire      4 5#   y [3:0] $end
$var wire      4 6#   x [3:0] $end
$var wire      3 7#   cout_cin [2:0] $end

$scope module adder4 $end
$var wire      1 8#   cout  $end
$var wire      1 9#   sum  $end
$var wire      1 :#   cin  $end
$var wire      1 ;#   y  $end
$var wire      1 <#   x  $end
$upscope $end


$scope module adder3 $end
$var wire      1 =#   cout  $end
$var wire      1 >#   sum  $end
$var wire      1 ?#   cin  $end
$var wire      1 @#   y  $end
$var wire      1 A#   x  $end
$upscope $end


$scope module adder2 $end
$var wire      1 B#   cout  $end
$var wire      1 C#   sum  $end
$var wire      1 D#   cin  $end
$var wire      1 E#   y  $end
$var wire      1 F#   x  $end
$upscope $end


$scope module adder1 $end
$var wire      1 G#   cout  $end
$var wire      1 H#   sum  $end
$var wire      1 I#   cin  $end
$var wire      1 J#   y  $end
$var wire      1 K#   x  $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions      $end
#0
$dumpvars
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
b0 7#
b0 6#
b0 5#
04#
b0 3#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
b0 {"
b0 z"
b0 y"
0x"
b0 w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
b0 a"
b0 `"
b0 _"
0^"
b0 ]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
b0 G"
b0 F"
b0 E"
0D"
b0 C"
0B"
b0 A"
b0 @"
b0 ?"
0>"
b0 ="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
b0 '"
b0 &"
b0 %"
0$"
b0 #"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
b0 k
b0 j
b0 i
0h
b0 g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
b0 Q
b0 P
b0 O
0N
b0 M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
b0 7
b0 6
b0 5
04
b0 3
02
b0 1
b0 0
b0 /
0.
b0 -
0,
0+
b0 *
b0 )
0(
b0 '
0&
0%
b0 $
0#
b0 "
b0 !
$end
#10
b1 !
b1 "
b1 *
b1 )
b1 @"
b1 ?"
b1 6#
b1 5#
1K#
1J#
1G#
b1 7#
1D#
1C#
b10 3#
b10 ="
b10 '
b10 $
#15
b1001110001000 !
b10011111011000 "
b1001110001000 *
b10011111011000 )
b1001110001000 @"
b10011111011000 ?"
b1000 6#
b1000 z"
b11 `"
b1 F"
b1000 5#
b1101 y"
b111 _"
b10 E"
0K#
1<#
1"#
1u"
1p"
1["
0J#
1;#
10#
1&#
1!#
1t"
1o"
1j"
1U"
0G#
1X"
18#
12#
1.#
1$#
1|"
1v"
1q"
1l"
1h"
1S"
b0 7#
b11 C"
b11 A"
b101 w"
b11 a"
b100 ]"
0D#
b11010001010010 ="
1/#
1x"
1s"
1^"
1n"
1i"
0C#
b11010001010010 '
b11010001010010 $
1-#
0.#
1r"
1m"
1g"
0h"
b0 3#
b1 {"
b100 w"
b11 ]"
b111 a"
b11001101000000 ="
1*#
1d"
b11001101000000 '
b11001101000000 $
1)#
1c"
b110 w"
b1011 ]"
b11101101100000 ="
b11101101100000 '
b11101101100000 $
#20
1#
1I#
14#
1>"
1(
1H#
b1 3#
b11101101100001 ="
b11101101100001 '
b11101101100001 $
#25
b0 !
b1 "
b0 *
b1 )
b0 @"
b1 ?"
b0 6#
b0 z"
b0 `"
b0 F"
b1 5#
b0 y"
b0 _"
b0 E"
0<#
0"#
0u"
0p"
0["
1J#
0;#
00#
0&#
0!#
0t"
0o"
0j"
0U"
08#
02#
0|"
0v"
0X"
1G#
0H#
0-#
1.#
0$#
0q"
0l"
0g"
1h"
0S"
b0 A"
b0 C"
b1 7#
b0 3#
b0 {"
b11 w"
b0 a"
b1111 ]"
0/#
0x"
0s"
0^"
b111100110000 ="
1D#
0*#
0n"
0i"
0d"
0.#
0r"
b111100110000 '
b111100110000 $
1C#
0)#
0m"
0h"
0c"
b0 w"
b0 ]"
b10 3#
b10 ="
b10 '
b10 $
#30
b1001110001000 !
b10011111011111 "
b1001110001000 *
b10011111011111 )
b1001110001000 @"
b10011111011111 ?"
b1000 6#
b1000 z"
b11 `"
b1 F"
b1111 5#
b1101 y"
b111 _"
b10 E"
1<#
1"#
1u"
1p"
1["
1E#
1@#
1;#
10#
1&#
1!#
1t"
1o"
1j"
1U"
1X"
1B#
0C#
1>#
18#
12#
1.#
1$#
1|"
1v"
1q"
1l"
1h"
1S"
b11 C"
b11 7#
b100 3#
b11 A"
b101 w"
b11 a"
b100 ]"
b11010001010100 ="
1?#
1/#
1x"
1s"
1^"
1n"
1i"
b11010001010100 '
b11010001010100 $
1=#
0>#
1-#
0.#
1r"
1m"
1g"
0h"
b111 7#
b0 3#
b1 {"
b100 w"
b11 ]"
b111 a"
1:#
b11001101000000 ="
1*#
1d"
19#
b11001101000000 '
b11001101000000 $
1)#
1c"
b1000 3#
b110 w"
b1011 ]"
b11101101101000 ="
b11101101101000 '
b11101101101000 $
